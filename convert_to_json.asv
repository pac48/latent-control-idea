% sub = rossubscriber('/camera/color/camera_info');
% msg = sub.LatestMessage;
tmp = load("camera_info_msg.mat");
msg = tmp.msg;
% msg.Height = 1080;
% msg.Width = 1920;

camera_angle_x = 2 * atan(double(msg.Width)/(2*msg.K(1) ));
% camera_angle_x = 1.500222222;
camera_angle_y = 2 * atan(double(msg.Height)/(2 * msg.K(5)));
% camera_angle_y = 0.994333333;

config_struct = struct(  "camera_angle_x", camera_angle_x, ...
    "camera_angle_y", camera_angle_y, ...
    "fl_x", msg.K(1), ...
    "fl_y", msg.K(5), ...
    "k1", msg.D(1), ...
    "k2", msg.D(2), ...
    "p1", msg.D(3), ...
    "p2", msg.D(4), ...
    "cx", msg.K(3), ...
    "cy", msg.K(6), ...
    "w", msg.Width, ...
    "h", msg.Height, ...
    "aabb_scale", 16, ... % set size of unit cube used for nerf, e.g side length is 4
    "frames", []);

files = dir('data');

count = 0;
pos = zeros(3,1);
for file = files'
    if file.bytes>0
        s = load(fullfile(file.folder, file.name) );
        pos = pos + s.dataPoint.T(1:3,end);
        count = count+1;
    end
end
pos = pos./count;
pos(3) = pos(3)-.3;
% pos = pos*0;

close all

delete(fullfile('box', 'images', '*'))
ind = 0;
for file = files'
    if file.bytes>0
%         ind = ind + 1;
        tmp = split(file.name,'_');
        tmp = tmp{2};
        tmp = split(tmp,'.');
        ind = tmp{1};
        s = load(fullfile(file.folder, file.name) );
        img = s.dataPoint.img;
        %         img= 255-img;
        img_path = fullfile('images', [ind '.jpg'] );
        imwrite(img, fullfile('box', img_path), 'jpg');
        % y is up, z is forward, but everything is negated
        T = s.dataPoint.T;
        %         T(1:3,1:3) = [0 1 0;
        %                       0 0 -1
        %                       1 0 0]*T(1:3,1:3);

        xAxis = T(1:3,1);
        yAxis = T(1:3,2);
        zAxis = T(1:3,3);
        %         T(1:3,3) = xAxis;
        %         T(1:3,2) = -yAxis;
        %         T(1:3,1) = zAxis;

                T(1:3,3) = -xAxis;
                T(1:3,2) = zAxis;
                T(1:3,1) = -yAxis;

%         T(1:3,3) = xAxis;
%         T(1:3,2) = -zAxis;
%         T(1:3,1) = cross(T(1:3,2), T(1:3,3));
%         T(1:3,1) =  T(1:3,1)./norm( T(1:3,1));


        T(1:3,end) = (T(1:3,end) - pos)*10;

        tmp = struct("file_path", img_path, "sharpness", 20, "transform_matrix", []);
        tmp.transform_matrix = T;

        config_struct.frames = cat(1,config_struct.frames,tmp);


        point = T(1:3,end);
        line =  [point point+T(1:3,1)*.05];
        hold on
        plot3(line(1,:), line(2,:), line(3,:),'MarkerSize',10, 'Marker','.', 'Color','r')
        line =  [point point+T(1:3,2)*.05];
        hold on
        plot3(line(1,:), line(2,:), line(3,:),'MarkerSize',10, 'Marker','.', 'Color','g')
        line =  [point point+T(1:3,3)*.05];
        hold on
        plot3(line(1,:), line(2,:), line(3,:),'MarkerSize',10, 'Marker','.', 'Color','b')

    end
end
axis equal

str = jsonencode(config_struct);
str  = strrep(str , ',',',\n');

fileName = 'transforms.json';
fid = fopen(fullfile('box', fileName), 'w');
fprintf(fid, str);
fclose(fid);


